@using ShopApp.Models

@{
    var cartItems = (List<CartItem>)ViewData["CartItems"];
    var totalCartItemQuantities = cartItems.Sum(ci => ci.Quantity);
}

@Html.Partial("_UserSummaryPartial")
<section class="cart-section">
    <div class="validation-summary">
        @Html.ValidationSummary()
    </div>
    <div class="cart-container">
        <h1>Basket</h1>
        @if (totalCartItemQuantities == 0)
        {
            <h4>No items in cart</h4>
        }
        else
        {
            foreach (var item in cartItems)
            {
                <form action="/Home/Delete" method="POST">
                    <strong>@item.Product.Title</strong> @($"x{item.Quantity}")
                    <input type="hidden" name="ProductId" value="@item.ProductId" />
                    <input type="submit" value="Remove" />
                </form>
            }
            <h4>TOTAL = @totalCartItemQuantities items</h4>
        }
    </div>
    <div class="payment-container">
        <h1>Pay Now</h1>
        <form id="payment-form">
            <div id="card-element">
                <!-- Elements will create input elements here -->
            </div>

            <!-- We'll put the error messages in this element -->
            <div id="card-errors" role="alert"></div>

            <button id="submit">Pay</button>
        </form>
    </div>
</section>

@section Scripts{
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // Set your publishable key: remember to change this to your live publishable key in production
        // See your keys here: https://dashboard.stripe.com/account/apikeys
        var stripe = Stripe('pk_test_SDBRLigKpRgzRoPqZL99TMdl');
        var elements = stripe.elements();

        // Set up Stripe.js and Elements to use in checkout form
        var style = {
            base: {
                color: "#32325d",
            }
        };

        var card = elements.create("card", { style: style });
        card.mount("#card-element");

        card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        var form = document.getElementById('payment-form');

        form.addEventListener('submit', function(ev) {
            ev.preventDefault();
            stripe.confirmCardPayment('@ViewData["ClientSecret"]', {
                payment_method: {
                    card: card,
                    billing_details: {
                        name: '@ViewData["LoggedInName"]'
                    }
                }
            }).then(function(result) {
                if (result.error) {
                    // Show error to your customer (e.g., insufficient funds)
                    console.log(result.error.message);
                } else {
                    // The payment has been processed!
                    if (result.paymentIntent.status === 'succeeded') {
                        // Show a success message to your customer
                        // There's a risk of the customer closing the window before callback
                        // execution. Set up a webhook or plugin to listen for the
                        // payment_intent.succeeded event that handles any business critical
                        // post-payment actions.
                        alert('Payment success!');

                    }
                }
            });
        });
    </script>
}